{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "WebserverIris_v220509_cur.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "Unfm4bNXb2NX"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HuLNYIVZ3LKv"
      },
      "source": [
        "#APIサーバーの構築（基本操作）\n",
        "*  2021/05/17 oriwebserver_v210517.ipynb\n",
        "*  https://qiita.com/k_0214/items/dcf14c74779eb9839577\n",
        "*  https://qiita.com/a2kiti/items/a6ae6715033bf22f7afc"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_RaxRE0l451b"
      },
      "source": [
        "*  index.htmlに飛べない？internal server errorになる。  \n",
        "=>templatesフォルダ内にindex.htmlを格納すれば良い。  \n",
        "*  ngrok無料版は1分間40アクセスの制限。  \n",
        "*  colaboratoryは90分,12時間の制限。"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "*   WebserverIris_v220509_cur.ipynb\n",
        "*   2022/05/09 従来方法ではトンネルできなかった。\n",
        "*   下記で一部代用して実現した。\n",
        "*   ngrokのKEYを予め登録する必要かな？従来はURL発行後にログインすればよかったが。\n",
        "*   https://colab.research.google.com/github/YutaroOgawa/pytorch_tutorials_jp/blob/main/notebook/5_Deployment/5_1_flask_rest_api_tutorial_jp.ipynb"
      ],
      "metadata": {
        "id": "puCmMT4Gn_FX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## サーバー環境構築\n",
        "別手法(2022/05/09)\n",
        "https://colab.research.google.com/github/YutaroOgawa/pytorch_tutorials_jp/blob/main/notebook/5_Deployment/5_1_flask_rest_api_tutorial_jp.ipynb\n",
        "\n"
      ],
      "metadata": {
        "id": "yQVzMWFBbqPD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install Flask==1.0.3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3AAGzzjiLAw",
        "outputId": "c65b5bc2-3147-43cd-b306-ac3c2d3bf06d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting Flask==1.0.3\n",
            "  Downloading Flask-1.0.3-py2.py3-none-any.whl (92 kB)\n",
            "\u001b[?25l\r\u001b[K     |███▋                            | 10 kB 22.9 MB/s eta 0:00:01\r\u001b[K     |███████▏                        | 20 kB 28.3 MB/s eta 0:00:01\r\u001b[K     |██████████▊                     | 30 kB 8.9 MB/s eta 0:00:01\r\u001b[K     |██████████████▎                 | 40 kB 10.5 MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 51 kB 3.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 61 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 71 kB 4.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 81 kB 4.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 92 kB 3.9 MB/s \n",
            "\u001b[?25hRequirement already satisfied: Jinja2>=2.10 in /usr/local/lib/python3.7/dist-packages (from Flask==1.0.3) (2.11.3)\n",
            "Requirement already satisfied: Werkzeug>=0.14 in /usr/local/lib/python3.7/dist-packages (from Flask==1.0.3) (1.0.1)\n",
            "Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask==1.0.3) (7.1.2)\n",
            "Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask==1.0.3) (1.1.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2>=2.10->Flask==1.0.3) (2.0.1)\n",
            "Installing collected packages: Flask\n",
            "  Attempting uninstall: Flask\n",
            "    Found existing installation: Flask 1.1.4\n",
            "    Uninstalling Flask-1.1.4:\n",
            "      Successfully uninstalled Flask-1.1.4\n",
            "Successfully installed Flask-1.0.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 日本語版追記（Google Colaboartory上でFlaskを動かすために）\n",
        "!pip install flask-ngrok"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rN-GpQf2iS7S",
        "outputId": "f8c85d03-799a-4698-fa86-f03aa16e9889"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting flask-ngrok\n",
            "  Downloading flask_ngrok-0.0.25-py3-none-any.whl (3.1 kB)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from flask-ngrok) (2.23.0)\n",
            "Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.7/dist-packages (from flask-ngrok) (1.0.3)\n",
            "Requirement already satisfied: Jinja2>=2.10 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (2.11.3)\n",
            "Requirement already satisfied: Werkzeug>=0.14 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (1.0.1)\n",
            "Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (7.1.2)\n",
            "Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask>=0.8->flask-ngrok) (1.1.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2>=2.10->Flask>=0.8->flask-ngrok) (2.0.1)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (2021.10.8)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (3.0.4)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->flask-ngrok) (1.24.3)\n",
            "Installing collected packages: flask-ngrok\n",
            "Successfully installed flask-ngrok-0.0.25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n",
        "!unzip ngrok-stable-linux-amd64.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vP7WGNL8muYv",
        "outputId": "72ceaa85-f5f4-46d6-eb22-cadcd993b889"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-05-10 00:20:34--  https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n",
            "Resolving bin.equinox.io (bin.equinox.io)... 54.161.241.46, 54.237.133.81, 18.205.222.128, ...\n",
            "Connecting to bin.equinox.io (bin.equinox.io)|54.161.241.46|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 13832437 (13M) [application/octet-stream]\n",
            "Saving to: ‘ngrok-stable-linux-amd64.zip’\n",
            "\n",
            "ngrok-stable-linux- 100%[===================>]  13.19M  6.60MB/s    in 2.0s    \n",
            "\n",
            "2022-05-10 00:20:37 (6.60 MB/s) - ‘ngrok-stable-linux-amd64.zip’ saved [13832437/13832437]\n",
            "\n",
            "Archive:  ngrok-stable-linux-amd64.zip\n",
            "  inflating: ngrok                   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ngrokへサインアップしてKEYを入手する。\n",
        "#https://ngrok.com/\n",
        "!./ngrok authtoken 22cifAe6ZCfmgCurfWXUoYxz1BR_21trDQbptxHmQ6V87Wydj"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ow8cfuOHiZe-",
        "outputId": "ace26baf-5443-4491-f9e0-05f358c8134d"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Authtoken saved to configuration file: /root/.ngrok2/ngrok.yml\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask\n",
        "from flask_ngrok import run_with_ngrok\n",
        "\n",
        "app = Flask(__name__)\n",
        "run_with_ngrok(app)\n",
        "\n",
        "@app.route('/')\n",
        "def hello():\n",
        "  return 'Hello World!'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  app.run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7hs7pDzPkjh4",
        "outputId": "d02cb7d7-cd1f-4a0e-8080-325b5a32d0dc"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app \"__main__\" (lazy loading)\n",
            " * Environment: production\n",
            "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
            "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Running on http://2d12-34-80-52-151.ngrok.io\n",
            " * Traffic stats available on http://127.0.0.1:4040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "127.0.0.1 - - [10/May/2022 00:21:50] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/May/2022 00:21:50] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fUX5dWQnLB9K"
      },
      "source": [
        "##index.htmlの作成\n",
        "index.htmlを作成し、templatesフォルダに格納するコード。  \n",
        "NEXT：\n",
        "*  自作ファイルをuploadする。\n",
        "*  googleDriveにリダイレクトできるか試す。  \n",
        "==>internal server error。多分権限。  \n",
        "==>サーバー起動ときにgoogleDriveからファイルをcopyすれば良い。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nHGpn2eEJ8Mf"
      },
      "source": [
        "#Writing to html file on colab\n",
        "\n",
        "html = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "<meta charset=\"utf-8\" />\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "Hello\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "import os\n",
        "#Saving html file\n",
        "if not os.path.isdir( \"templates\" ):\n",
        "    os.makedirs( \"templates\" )\n",
        "with open(\"templates/index.html\", mode='w') as f:\n",
        "    f.write(html)\n"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Io3Qd8jLVGi"
      },
      "source": [
        "##サーバーの起動\n",
        "*  実行されている間、他セルの実行ができない？  \n",
        "*  最後に実行すること。  \n",
        "*  止めたときは「ランタイム再起動」をする。とあったが、URL発行からやり直せば大丈夫かもしれない。"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask\n",
        "from flask_ngrok import run_with_ngrok\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "run_with_ngrok(app)\n",
        "\n",
        "@app.route('/')\n",
        "def index():\n",
        "    return render_template( \"index.html\" )\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  app.run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DszqLIyUlE4f",
        "outputId": "ffffcec7-c908-4e11-a56e-cc482391c10f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app \"__main__\" (lazy loading)\n",
            " * Environment: production\n",
            "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
            "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Running on http://294b-34-125-249-156.ngrok.io\n",
            " * Traffic stats available on http://127.0.0.1:4040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "127.0.0.1 - - [09/May/2022 20:15:16] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [09/May/2022 20:15:16] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1LxBFgaEZ2RM"
      },
      "source": [
        "#アプリ用\n",
        "*  手順\n",
        "  1.  必要なファイルの準備\n",
        "    *  index.html(下記にコードあり)\n",
        "    *  iris.csv（DL用pythonコードあり）\n",
        "  2.  ファイルの格納。\n",
        "    * /content/templates/　に入れる。\n",
        "  3.  modelSVCの実行（結果はでない。関数呼び出しのための事前実行）\n",
        "  4.  URL発行 (ngrokによる)\n",
        "  5.  APIserverの実行 (tm_server.pyの改良版)\n",
        "*  colaboratoryから動くようにはした。\n",
        "  1.  別ファイルのコードをコピペし一度実行させる。\n",
        "  2.  上記を関数として呼び出す。\n",
        "  *   別ファイルpyをモジュールとしてimportできるか試す。  \n",
        "*  モデルやＰＧファイルをgoogleDrive内にした場合の確認。  \n",
        "外部からアクセス可能なのか調査必要。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYKA0EMGpTJd"
      },
      "source": [
        "## 1.必要なファイルの準備"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LV6pO_OmqjF-"
      },
      "source": [
        "###index.html\n",
        "下記をダブルクリックするとhtmlコードが見れる。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "miQyuf5Dqmh-"
      },
      "source": [
        "<!-- index.html -->\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "\t<meta charset=\"utf-8\">\n",
        "</head>\n",
        "<body>\n",
        "\t<h1>ajaxのテスト</h1>\n",
        "\t<p></p>\n",
        "\t<div>\n",
        "\t\t<input type=\"text\" id=\"q\" ><br />\n",
        "\t\t<input type=\"text\" id=\"r\" ><br />\n",
        "\t\t<input type=\"text\" id=\"s\" ><br />\n",
        "\t\t<input type=\"text\" id=\"t\" ><br />\n",
        "\t\t<button id=\"qButton\">judge</button>\n",
        "\t\t<div id=\"result\"></div>\n",
        "\t</div>\n",
        "\t<script>\n",
        "\t\tconst qs=(q)=> document.querySelector(q)\n",
        "\t\tconst rs=(r)=> document.querySelector(r)\n",
        "\t\tconst ss=(s)=> document.querySelector(s)\n",
        "\t\tconst ts=(t)=> document.querySelector(t)\n",
        "\t\twindow.onload = () =>{\n",
        "\t\t\tconst q       = qs('#q')\n",
        "\t\t\tconst qButton = qs('#qButton')\n",
        "\t\t\tconst result  = qs('#result')\n",
        "\t\t\tconst r       = rs('#r')\n",
        "\t\t\tconst s       = ss('#s')\n",
        "\t\t\tconst t       = ts('#t')\n",
        "\n",
        "\t\t\tqButton.onclick = () => {\n",
        "\t\t\t\tresult.innerHTML = q.value\n",
        "\n",
        "\t\t\t\tconst api = \"/api?q=\" + encodeURIComponent(q.value)  +\"&r=\"+encodeURIComponent(r.value)+\"&s=\"+encodeURIComponent(s.value)+\"&t=\"+encodeURIComponent(t.value)\n",
        "\t\t\t\tresult.innerHTML = api\n",
        "\t\t\t\tfetch(api).then(\n",
        "\t\t\t\t\t(res) => { return res.json() }\n",
        "\t\t\t\t).then(\n",
        "\t\t\t\t\t(data) => {result.innerHTML = data[\"z\"] +\"<br /> \"+data[\"q\"] + \" \" + data[\"r\"] + \" \" + data[\"s\"] + \" \" + data[\"t\"]}\n",
        "\t\t\t\t)\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t</script>\n",
        "\t<style>\n",
        "\t\t#result{ padding: 10px; font-size: 2em; color:red;}\n",
        "\t\t#q {background-color: #fffff0;}\n",
        "\t</sytle>\n",
        "</body>\n",
        "</html>\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JsKRmKNkNagT"
      },
      "source": [
        "#Writing to html file on colab\n",
        "\n",
        "html = \"\"\"\n",
        "<!-- index.html -->\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "\t<meta charset=\"utf-8\">\n",
        "</head>\n",
        "<body>\n",
        "\t<h1>ajaxのテスト</h1>\n",
        "\t<p></p>\n",
        "\t<div>\n",
        "\t\t<input type=\"text\" id=\"q\" ><br />\n",
        "\t\t<input type=\"text\" id=\"r\" ><br />\n",
        "\t\t<input type=\"text\" id=\"s\" ><br />\n",
        "\t\t<input type=\"text\" id=\"t\" ><br />\n",
        "\t\t<button id=\"qButton\">judge</button>\n",
        "\t\t<div id=\"result\"></div>\n",
        "\t</div>\n",
        "\t<script>\n",
        "\t\tconst qs=(q)=> document.querySelector(q)\n",
        "\t\tconst rs=(r)=> document.querySelector(r)\n",
        "\t\tconst ss=(s)=> document.querySelector(s)\n",
        "\t\tconst ts=(t)=> document.querySelector(t)\n",
        "\t\twindow.onload = () =>{\n",
        "\t\t\tconst q       = qs('#q')\n",
        "\t\t\tconst qButton = qs('#qButton')\n",
        "\t\t\tconst result  = qs('#result')\n",
        "\t\t\tconst r       = rs('#r')\n",
        "\t\t\tconst s       = ss('#s')\n",
        "\t\t\tconst t       = ts('#t')\n",
        "\n",
        "\t\t\tqButton.onclick = () => {\n",
        "\t\t\t\tresult.innerHTML = q.value\n",
        "\n",
        "\t\t\t\tconst api = \"/api?q=\" + encodeURIComponent(q.value)  +\"&r=\"+encodeURIComponent(r.value)+\"&s=\"+encodeURIComponent(s.value)+\"&t=\"+encodeURIComponent(t.value)\n",
        "\t\t\t\tresult.innerHTML = api\n",
        "\t\t\t\tfetch(api).then(\n",
        "\t\t\t\t\t(res) => { return res.json() }\n",
        "\t\t\t\t).then(\n",
        "\t\t\t\t\t(data) => {result.innerHTML = data[\"z\"] +\"<br /> \"+data[\"q\"] + \" \" + data[\"r\"] + \" \" + data[\"s\"] + \" \" + data[\"t\"]}\n",
        "\t\t\t\t)\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t</script>\n",
        "\t<style>\n",
        "\t\t#result{ padding: 10px; font-size: 2em; color:red;}\n",
        "\t\t#q {background-color: #fffff0;}\n",
        "\t</sytle>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "import os\n",
        "#Saving html file\n",
        "if not os.path.isdir( \"templates\" ):\n",
        "    os.makedirs( \"templates\" )\n",
        "with open(\"templates/index.html\", mode='w') as f:\n",
        "    f.write(html)"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BwmMxXZrq5Ao"
      },
      "source": [
        "###iris.cvs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PvWty4jorA3N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f98b4c54-0a6d-440d-8395-5c700f8030d7"
      },
      "source": [
        "### iris.csv download\n",
        "import urllib.request as req\n",
        "import pandas as pd\n",
        "\n",
        "# 2021/05/17 not found\n",
        "#url = \"https://raw.githubusercontent.com/pandas-dev/pandas/master/pandas/tests/data/iris.csv\"\n",
        "url = \"https://raw.githubusercontent.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/iris.csv\"\n",
        "savefile =\"iris.csv\"\n",
        "\n",
        "req.urlretrieve(url, savefile)\n",
        "print(\"saved as\",savefile)\n",
        "\n",
        "#csv=pd.read_csv(savefile, encoding=\"utf-8\")\n",
        "#csv\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "saved as iris.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VhZ5KGI3rFw7"
      },
      "source": [
        "##2.templatesフォルダへコピーする。\n",
        "*  googleDriveからtemplatesフォルダへコピーするなら下記のように。\n",
        "*  ローカルから直接uploadしても良い。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H91XHMPSoyqr"
      },
      "source": [
        "# iris.csvはtemplatesに移動する必要はなかった 2021/05/17\n",
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1wXKFnsnrsG-"
      },
      "source": [
        "##3.modelSVCの実行  \n",
        "（結果はでない。関数呼び出しのための事前実行）"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpox2jKRiUaR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a96674df-7f55-4f8b-d75a-6057933838b7"
      },
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "def modelSVCpredrun(x_input):\n",
        "#  iris_data = pd.read_csv(\"/content/templates/iris.csv\", encoding=\"utf-8\")\n",
        "  iris_data = pd.read_csv(\"/content/iris.csv\", encoding=\"utf-8\")\n",
        " \n",
        "  y = iris_data.loc[:,\"Name\"]\n",
        "  x = iris_data.loc[:,[\"SepalLength\",\"SepalWidth\",\"PetalLength\",\"PetalWidth\"]]\n",
        "\n",
        "  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, train_size=0.8, shuffle=True)\n",
        "\n",
        "  clf = SVC()\n",
        "  clf.fit(x_train, y_train)\n",
        "\n",
        "  y_pred = clf.predict(x_test)\n",
        "  print(\"acc = \",accuracy_score(y_test,y_pred))\n",
        "\n",
        "  #x_input=[[5.1, 3.5, 1.4, 0.2]]  # Iris-setosa\n",
        "  #x_input=[[6.7, 3.0, 5.2, 2.3]]  # Iris-virginica\n",
        "  y_pred = clf.predict(x_input)\n",
        "  print(\"pred = \",y_pred)\n",
        "  return y_pred\n",
        "\n",
        "if __name__ == '__main__':#直接yobareru.pyを実行した時だけ、def test()を実行する\n",
        "  result = modelSVCpredrun([[5.1, 3.5, 1.4, 0.2]])\n",
        "  z=result[0]\n",
        "  print(\"result=\", z)\n",
        "#print('モジュール名：{}'.format(__name__))  #実行したモジュール名を表示する\n"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acc =  0.9333333333333333\n",
            "pred =  ['Iris-setosa']\n",
            "result= Iris-setosa\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ekR4iwU6r0Dh"
      },
      "source": [
        "##4.URL発行 (ngrokによる)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "N4SUcCf9piQf"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Eojujd4Lr4oa"
      },
      "source": [
        "##5.APIserverの実行 (tm_server.pyの改良版)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask\n",
        "from flask_ngrok import run_with_ngrok\n",
        "from flask import Flask, render_template\n",
        "\n",
        "app = Flask(__name__)\n",
        "run_with_ngrok(app)\n",
        "\n",
        "@app.route('/')\n",
        "def index():\n",
        "    return render_template( \"index.html\" )\n",
        "\n",
        "if __name__ == '__main__':\n",
        "  app.run()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-DE3ORIVlm3H",
        "outputId": "6ba68d78-a2fa-428f-bbc8-9ceef14bfd53"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app \"__main__\" (lazy loading)\n",
            " * Environment: production\n",
            "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
            "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Running on http://cdd1-34-80-52-151.ngrok.io\n",
            " * Traffic stats available on http://127.0.0.1:4040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "127.0.0.1 - - [10/May/2022 00:22:41] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/May/2022 00:22:42] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n",
            "127.0.0.1 - - [10/May/2022 00:23:25] \"\u001b[33mGET /api?q=5.1&r=3.5&s=1.4&t=0.2 HTTP/1.1\u001b[0m\" 404 -\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XObGEExUaA0k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "804bbf63-d8ea-4344-aa72-50df58957419"
      },
      "source": [
        "from flask import Flask, render_template\n",
        "from flask_ngrok import run_with_ngrok\n",
        "\n",
        "#p341を改変\n",
        "import json\n",
        "import flask\n",
        "from flask import request\n",
        "#import modelSVC\n",
        "\n",
        "\n",
        "app = Flask(__name__)\n",
        "run_with_ngrok(app)\n",
        "\n",
        "@app.route(\"/\")\n",
        "def index():\n",
        "    return render_template( \"index.html\" )\n",
        "\n",
        "\n",
        "@app.route('/api', methods=['GET'])\n",
        "def api():\n",
        "\tq=request.args.get('q', '')\n",
        "\tr=request.args.get('r', '')\n",
        "\ts=request.args.get('s', '')\n",
        "\tt=request.args.get('t', '')\n",
        "\n",
        "\t# [[5.1, 3.5, 1.4, 0.2]]  # Iris-setosa\n",
        "\t# [[6.7, 3.0, 5.2, 2.3]]  # Iris-virginica\n",
        "#\tresult = modelSVC.predrun([[5.1, 3.5, 1.4, 0.2]]) #iris-setoca\n",
        "\tresult = modelSVCpredrun([[q, r, s, t]])\n",
        "\tz=result[0]\n",
        "\tprint(\"result=\", z)\n",
        "\n",
        "\treturn json.dumps({\n",
        "\t\t\"z\"  : z,\n",
        "\t\t\"q\"  : q,\n",
        "\t\t\"r\"  : r,\n",
        "\t\t\"s\"  : s,\n",
        "\t\t\"t\"  : t,\n",
        "\t})\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    #app.run(debug=False,port=6006)\n",
        "\tapp.run()\n"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Serving Flask app \"__main__\" (lazy loading)\n",
            " * Environment: production\n",
            "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
            "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
            " * Debug mode: off\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * Running on http://ce30-34-80-52-151.ngrok.io\n",
            " * Traffic stats available on http://127.0.0.1:4040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "127.0.0.1 - - [10/May/2022 00:23:43] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n",
            "127.0.0.1 - - [10/May/2022 00:23:44] \"\u001b[33mGET /favicon.ico HTTP/1.1\u001b[0m\" 404 -\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n",
            "127.0.0.1 - - [10/May/2022 00:24:13] \"\u001b[37mGET /api?q=5.1&r=3.5&s=1.4&t=0.2 HTTP/1.1\u001b[0m\" 200 -\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acc =  1.0\n",
            "pred =  ['Iris-setosa']\n",
            "result= Iris-setosa\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n",
            "127.0.0.1 - - [10/May/2022 00:24:35] \"\u001b[37mGET /api?q=6.7&r=3.0&s=5.2&t=2.3 HTTP/1.1\u001b[0m\" 200 -\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "acc =  1.0\n",
            "pred =  ['Iris-virginica']\n",
            "result= Iris-virginica\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Unfm4bNXb2NX"
      },
      "source": [
        "#Appendix:ローカル環境での実行コード(2022/05/09以前に動作確認：現在不明。)\n",
        "必要なファイル\n",
        "*  tm_server.py\n",
        "*  modelSVC.py\n",
        "*  index.html\n",
        "*  iris.cvs(DL用pythonコード)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ufQkUfTEaEgm"
      },
      "source": [
        "###############\n",
        "#tm_server.py\n",
        "###############\n",
        "#p341を改変\n",
        "import json\n",
        "import flask\n",
        "from flask import request\n",
        "#import modelSVC\n",
        "\n",
        "TM_PORT_NO = 8085\n",
        "app=flask.Flask(__name__)\n",
        "print(\"http://localhost:\" + str(TM_PORT_NO))\n",
        "print(\"run route-app\")\n",
        "#modelSVC.makemodel()\n",
        "\n",
        "\n",
        "@app.route('/', methods=['GET'])\n",
        "def index():\n",
        "\twith open(\"index.html\", \"rb\") as f:\n",
        "\t\treturn f.read()\n",
        "\n",
        "@app.route('/api', methods=['GET'])\n",
        "def api():\n",
        "\tq=request.args.get('q', '')\n",
        "\tr=request.args.get('r', '')\n",
        "\ts=request.args.get('s', '')\n",
        "\tt=request.args.get('t', '')\n",
        "\n",
        "\tprint(\"q=\", q)\n",
        "\tprint(\"r=\", r)\n",
        "\tprint(\"s=\", s)\n",
        "\tprint(\"t=\", t)\n",
        "\n",
        "\t# [[5.1, 3.5, 1.4, 0.2]]  # Iris-setosa\n",
        "\t# [[6.7, 3.0, 5.2, 2.3]]  # Iris-virginica\n",
        "#\tresult = modelSVC.predrun([[5.1, 3.5, 1.4, 0.2]]) #iris-setoca\n",
        "#\tresult = modelSVC.predrun([[q, r, s, t]])\n",
        "\tz=result[0]\n",
        "\tprint(\"result=\", z)\n",
        "\n",
        "\treturn json.dumps({\n",
        "\t\t\"z\"  : z,\n",
        "\t\t\"q\"  : q,\n",
        "\t\t\"r\"  : r,\n",
        "\t\t\"s\"  : s,\n",
        "\t\t\"t\"  : t,\n",
        "\t})\n",
        "\n",
        "if __name__ == '__main__':\n",
        "\tapp.run(debug=False, port=TM_PORT_NO)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C_hH6cUHbj_g"
      },
      "source": [
        "###############\n",
        "#modelSVC.py\n",
        "###############\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "import pickle\n",
        "\n",
        "def makemodel():\n",
        "  iris_data = pd.read_csv(\"iris.csv\", encoding=\"utf-8\")\n",
        "  y = iris_data.loc[:,\"Name\"]\n",
        "  x = iris_data.loc[:,[\"SepalLength\",\"SepalWidth\",\"PetalLength\",\"PetalWidth\"]]\n",
        "\n",
        "  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, train_size=0.8, shuffle=True)\n",
        "\n",
        "  clf = SVC()\n",
        "  clf.fit(x_train, y_train)\n",
        "\n",
        "  result = clf.score(x_test, y_test)\n",
        "  print(result)\n",
        "\n",
        "  filename = 'IrisSvcModel.sav'\n",
        "  pickle.dump(clf, open(filename,'wb'))\n",
        "\n",
        "\n",
        "\n",
        "def predrun(x_input):\n",
        "  filename = 'IrisSvcModel.sav'\n",
        "  clf=pickle.load(open(filename,'rb'))\n",
        "\n",
        "  #x_input=[[5.1, 3.5, 1.4, 0.2]]  # Iris-setosa\n",
        "  #x_input=[[6.7, 3.0, 5.2, 2.3]]  # Iris-virginica\n",
        "  y_pred = clf.predict(x_input)\n",
        "  print(\"pred = \",y_pred)\n",
        "  return y_pred\n",
        "\n",
        "if __name__ == '__main__':#直接yobareru.pyを実行した時だけ、def test()を実行する\n",
        "    makemodel()\n",
        "\n",
        "print('モジュール名：{}'.format(__name__))  #実行したモジュール名を表示する\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RPyRNs_YmYH_"
      },
      "source": [
        "<!-- index.html -->\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "\t<meta charset=\"utf-8\">\n",
        "</head>\n",
        "<body>\n",
        "\t<h1>ajaxのテスト</h1>\n",
        "\t<p></p>\n",
        "\t<div>\n",
        "\t\t<input type=\"text\" id=\"q\" ><br />\n",
        "\t\t<input type=\"text\" id=\"r\" ><br />\n",
        "\t\t<input type=\"text\" id=\"s\" ><br />\n",
        "\t\t<input type=\"text\" id=\"t\" ><br />\n",
        "\t\t<button id=\"qButton\">judge</button>\n",
        "\t\t<div id=\"result\"></div>\n",
        "\t</div>\n",
        "\t<script>\n",
        "\t\tconst qs=(q)=> document.querySelector(q)\n",
        "\t\tconst rs=(r)=> document.querySelector(r)\n",
        "\t\tconst ss=(s)=> document.querySelector(s)\n",
        "\t\tconst ts=(t)=> document.querySelector(t)\n",
        "\t\twindow.onload = () =>{\n",
        "\t\t\tconst q       = qs('#q')\n",
        "\t\t\tconst qButton = qs('#qButton')\n",
        "\t\t\tconst result  = qs('#result')\n",
        "\t\t\tconst r       = rs('#r')\n",
        "\t\t\tconst s       = ss('#s')\n",
        "\t\t\tconst t       = ts('#t')\n",
        "\n",
        "\t\t\tqButton.onclick = () => {\n",
        "\t\t\t\tresult.innerHTML = q.value\n",
        "\n",
        "\t\t\t\tconst api = \"/api?q=\" + encodeURIComponent(q.value)  +\"&r=\"+encodeURIComponent(r.value)+\"&s=\"+encodeURIComponent(s.value)+\"&t=\"+encodeURIComponent(t.value)\n",
        "\t\t\t\tresult.innerHTML = api\n",
        "\t\t\t\tfetch(api).then(\n",
        "\t\t\t\t\t(res) => { return res.json() }\n",
        "\t\t\t\t).then(\n",
        "\t\t\t\t\t(data) => {result.innerHTML = data[\"z\"] +\"<br /> \"+data[\"q\"] + \" \" + data[\"r\"] + \" \" + data[\"s\"] + \" \" + data[\"t\"]}\n",
        "\t\t\t\t)\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t</script>\n",
        "\t<style>\n",
        "\t\t#result{ padding: 10px; font-size: 2em; color:red;}\n",
        "\t\t#q {background-color: #fffff0;}\n",
        "\t</sytle>\n",
        "</body>\n",
        "</html>\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yLbmOPiNmf-X"
      },
      "source": [
        "### iris.csv download\n",
        "import urllib.request as req\n",
        "import pandas as pd\n",
        "\n",
        "url = \"https://raw.githubusercontent.com/pandas-dev/pandas/master/pandas/tests/data/iris.csv\"\n",
        "savefile =\"iris.csv\"\n",
        "\n",
        "req.urlretrieve(url, savefile)\n",
        "print(\"saved as\",savefile)\n",
        "\n",
        "#csv=pd.read_csv(savefile, encoding=\"utf-8\")\n",
        "#csv\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
